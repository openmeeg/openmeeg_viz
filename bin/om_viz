#!/usr/bin/env python

"""
Simple viewer for tri mesh files and OpenMEEG geometry files

Usage
-----

om_viz model.geom mesh1.tri mesh2.tri dipoles.txt

basically om_viz displays all the files on the command line
guessing the format with the extensions (.tri, .geom or .txt)

@author: - A. Gramfort, alexandre.gramfort@telecom-paristech.fr
"""

import sys
import numpy as np
import os


def read_geom(geom_file):
    """readGeom : provides paths to meshes present in .geom file"""
    f = open(geom_file, 'r')
    lines = f.readlines()
    mesh_files = []
    for l in lines:
        words = l.split()
        if (len(words) > 1):
            if (words[0] == "Interfaces"):
                nb_mesh = int(words[1])
                print("Nb mesh files : %d" % nb_mesh)
                continue

        if (len(words) == 1):
            mesh_file = words[0]
            if (mesh_file[-4:] == ".tri"):
                mesh_files.append(mesh_file)
            if not os.path.exists(mesh_file):
                print("Could not find mesh : " + mesh_file)
            continue

        if ((len(words) > 1) and words[0].startswith('Interface')):
            mesh_file = words[-1][1:-1]
            if (mesh_file[-4:] == ".tri"):
                mesh_files.append(mesh_file)
            if not os.path.exists(mesh_file):
                print("Could not find mesh : " + mesh_file)
            continue

    for k, fname in enumerate(mesh_files):
        if not os.path.isabs(fname):
            mesh_files[k] = os.path.join(os.path.dirname(geom_file), fname)

    print('Found : %s' % mesh_files)
    return mesh_files


def read_tri(fname):
    """Read .tri file

    Parameters
    ----------
    fname : str
        The file to read.

    Returns
    -------
    points : ndarray, shape (n_points, 3)
        The vertices
    normals : ndarray, shape (n_points, 3)
        The normals at the vertices
    faces : ndarray, shape (n_faces, 3)
        The faces
    """
    assert(fname.endswith('.tri'))
    fid = open(fname, "r")
    # read the number of vertices
    npoints = int(fid.readline().split()[1])

    points = []
    faces = []
    normals = []

    # fills the vertices arrays
    for _ in range(npoints):
        vals = list(map(float, fid.readline().split()))
        points.append(vals[:3])
        normals.append(vals[3:])

    # Read the number of triangles
    n_faces = int(fid.readline().split()[1])
    # create the list of triangles
    for _ in range(n_faces):
        vals = list(map(int, fid.readline().split()))
        faces.append(vals[:3])

    # Convert to numpy arrays
    points = np.asarray(points)
    normals = np.asarray(normals)
    faces = np.asarray(faces)
    return points, normals, faces


class Mesh(object):
    '''Class to open .tri files and plot surfaces with mayavi

    Parameters
    ----------
    fname : str
        The file to read.

    Attributes
    ----------
    points : ndarray, shape (n_points, 3)
        The vertices
    normals : ndarray, shape (n_points, 3)
        The normals at the vertices
    faces : ndarray, shape (n_faces, 3)
        The faces

    Example
    -------
    head = Mesh("MyHeadFile.tri")

    Notes
    -----
    To plot the surface of the corresponding object, call the function
    'self.plot(**kwarg)'. The kwarg options are the one from
    enthought.mayavi.mlab.triangular_mesh
    '''
    def __init__(self, fname):
        self.points, self.normals, self.faces = \
            read_tri(fname)

    def plot(self, **kwargs):
        """Plot mesh with Mayavi

        Parameters
        ----------
        **kwargs : params
            Parameters passed to mlab.triangular_mesh
        """
        from mayavi import mlab
        f = mlab.triangular_mesh(self.points[:, 0], self.points[:, 1],
                                 self.points[:, 2], self.faces, **kwargs)
        return f


def run():
    if '--help' in sys.argv or len(sys.argv) == 1:
        print("Usage:\n"
              "Pass any geom txt or tri file to the command line. "
              "For example.\n\n"
              "om_viz model.geom mesh1.tri mesh2.tri dipoles.txt")
        return

    from mayavi import mlab  # don't import mlab just to get help

    colors = []
    colors.append((0.95, 0.83, 0.83))  # light pink
    colors.append((0.91, 0.89, 0.67))
    colors.append((0.67, 0.89, 0.91))  # light blue
    colors.append((0.68, 0.68, 0.68))  # grey

    colors = colors * 3
    cnt = 0
    for ii, fname in enumerate(sys.argv[1:]):
        print(fname)
        if fname.endswith(".tri"):
            mesh = Mesh(fname)
            mesh.plot(color=colors[cnt], opacity=0.4)
            cnt += 1

        if fname.endswith(".geom"):
            for fn in read_geom(fname):
                mesh = Mesh(fn)
                mesh.plot(color=colors[cnt], opacity=0.4)
                cnt += 1

        if fname.endswith(".txt"):
            pts = np.loadtxt(fname)
            if pts.shape[1] == 3:
                mlab.points3d(pts[:, 0], pts[:, 1], pts[:, 2],
                              opacity=0.5, scale_factor=0.01, color=(1, 0, 0))
            if pts.shape[1] == 6:
                mlab.quiver3d(pts[:, 0], pts[:, 1], pts[:, 2],
                              pts[:, 3], pts[:, 4], pts[:, 5],
                              opacity=0.5, scale_factor=0.01, color=(0, 1, 0),
                              mode='cone')
    mlab.show()


if __name__ == '__main__':
    run()
